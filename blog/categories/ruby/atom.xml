<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | tz's Blog]]></title>
  <link href="http://itianzhu.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://itianzhu.github.io/"/>
  <updated>2013-12-26T23:41:49+08:00</updated>
  <id>http://itianzhu.github.io/</id>
  <author>
    <name><![CDATA[tz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[翻译]Ruby中的Catch和Throw]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/26/fan-yi-rubyzhong-de-catchhe-throw/"/>
    <updated>2013-12-26T23:38:55+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/26/fan-yi-rubyzhong-de-catchhe-throw</id>
    <content type="html"><![CDATA[<p><a href="http://www.jacopretorius.net/2012/01/catch-and-throw-in-ruby.html">原文地址：http://www.jacopretorius.net/2012/01/catch-and-throw-in-ruby.html</a></p>

<p>异常应该是意外的，Ruby也提供一种轻量的实现。</p>

<h3>例子</h3>

<p>```
def get_number
  rand(100)
end</p>

<p>random_numbers = catch (:random_numbers) do
  result = []
  10.times do</p>

<pre><code>num = get_number
throw :random_numbers if num &lt; 10
result &lt;&lt; num
</code></pre>

<p>  end
  result
end
<code>
catch带一个参数创建了一个block，这个block在throw触发之前正常执行。  
当throw触发时，Ruby会以它带的参数在调用栈中查找对应的catch语句。然后回退到catch那里，并且停止执行block。  
在这个例子中，block的返回值有两种可能，如果没有小于10的数字触发throw，那么数组会返回。如果触发了throw，那么会返回nil。也可以改变这个返回值，例如，可以通过给throw设置第二个参数，返回一个空数组
</code>
random_numbers = catch (:random_numbers) do
  result = []
  10.times do</p>

<pre><code>num = get_number
throw(:random_numbers, []) if num &lt; 10
result &lt;&lt; num
</code></pre>

<p>  end
  result
end
```</p>

<h3>性能</h3>

<p>会导致性能降低是不应该在代码中使用太多异常的原因之一。每一个异常的抛出都会建立一个栈跟踪信息。如果你的异常的确是意外，倒没什么。但是如果是用于循环中的流程控制，就会有性能问题。而catch-throw不用建立跟踪信息。
```
start = Time.now
10_000_000.times do |i|
  begin</p>

<pre><code>raise StandardError, "Error #{i}"
</code></pre>

<p>  rescue StandardError => error</p>

<pre><code>error.inspect
</code></pre>

<p>  end
end
puts &ldquo;Raise&amp;Rescue Operation took #{Time.now &ndash; start} seconds&rdquo;</p>

<p>start = Time.now
10_000_000.times do |i|
  catch (:the_loop) do</p>

<pre><code>throw :the_loop
</code></pre>

<p>  end
end
puts &ldquo;Catch&amp;Throw Operation took #{Time.now &ndash; start} seconds&rdquo;</p>

<p>```
<img src="https://lh4.googleusercontent.com/-Y0q4RW_h-xo/TxXvrMtCCtI/AAAAAAAAAkA/dNT8gKtYmE4/s800/Screen%252520Shot%2525202012-01-17%252520at%2525205.00.06%252520PM.png" alt="" />
这里的性能差异明显。</p>

<h3>总结</h3>

<p>catch-throw适用于退出嵌套的程序流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby调试]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/22/rubydiao-shi/"/>
    <updated>2013-12-22T22:16:47+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/22/rubydiao-shi</id>
    <content type="html"><![CDATA[<p>开始调试
<code>
$ ruby -r debug test.rb
</code>
支持的命令，参考<a href="http://www.zenspider.com/Languages/Ruby/QuickRef.html#debugger">http://www.zenspider.com/Languages/Ruby/QuickRef.html#debugger</a>
```
b[reak] [file:|class:]&lt;line|method
b[reak] [class.]&lt;line|method</p>

<pre><code>                       set breakpoint to some position
</code></pre>

<p>wat[ch] expression         set watchpoint to some expression
cat[ch] exception          set catchpoint to an exception
b[reak]                    list breakpoints
cat[ch]                    show catchpoint
del[ete][ nnn]             delete some or all breakpoints
disp[lay] expression       add expression into display expression list
undisp[lay][ nnn]          delete one particular or all display expressions
c[ont]                     run until program ends or hit breakpoint
s[tep][ nnn]               step (into methods) one line or till line nnn
n[ext][ nnn]               go over one line or till line nnn
w[here]                    display frames
f[rame]                    alias for where
l[ist][ (&ndash;|nn-mm)]         list program, &ndash; lists backwards</p>

<pre><code>                       nn-mm lists given lines
</code></pre>

<p>up[ nn]                    move to higher frame
down[ nn]                  move to lower frame
fin[ish]                   return to outer frame
tr[ace] (on|off)           set trace mode of current thread
tr[ace] (on|off) all       set trace mode of all threads
q[uit]                     exit from debugger
v[ar] g[lobal]             show global variables
v[ar] l[ocal]              show local variables
v[ar] i[nstance] object    show instance variables of object
v[ar] c[onst] object       show constants of object
m[ethod] i[nstance] obj    show methods of object
m[ethod] class|module      show instance methods of class or module
th[read] l[ist]            list all threads
th[read] c[ur[rent]]       show current thread
th[read] [sw[itch]] nnn    switch thread context to nnn
th[read] stop nnn          stop thread nnn
th[read] resume nnn        resume thread nnn
p expression               evaluate expression and print its value
h[elp]                     print this help
everything else            evaluate
empty                      repeats the last command
```
或者使用<a href="http://bashdb.sourceforge.net/ruby-debug.html">ruby-debug</a>等</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby the Standard Protocols and Coercions]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/22/ruby-the-standard-protocols-and-coercions/"/>
    <updated>2013-12-22T21:51:24+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/22/ruby-the-standard-protocols-and-coercions</id>
    <content type="html"><![CDATA[<h2>Standard Protocols</h2>

<p>Ruby中定义了一些默认调用的方法，比如作为p 的参数时就会默认调用to_s
```
to_a
to_i
to_enum
to_hash
to_io
to_proc</p>

<h1>&hellip;&hellip;.</h1>

<p><code>
下面是Symbol中实现的to_proc
</code>
def to_proc
  proc {|obj, <em>args| obj.send(self,</em>args)}
end
```</p>

<h5>当用&amp;调用时就会去调用这个方法，我们自己的类实现这个后，也可有这个功能</h5>

<p>```
class A &lt; String
  def to_proc</p>

<pre><code>proc {|obj, *args| obj.send(:length,*args)}
</code></pre>

<p>  end
end
a = A.new
words = %w{bbb cccc fffff}
words.map(&amp;a)
```</p>

<h2>Coercions</h2>

<p>在operate操作时，判定应该谁调用谁，所以有时候是参数调用了receiver。返回的第一个是参数，第二个是应该作为receiver。
<code>
1.coerce(2.3) # =&gt; [2.3, 1.0]
</code>
可以自己实现这个方法
```
class A
  def coerce other</p>

<pre><code>#===在Module上调用时，是子类的意思，
#object上简单等同于==
if Fixnum === other 
  [other,2]
end
</code></pre>

<p>  end
end
a = A.new
1 + a</p>

<h1>=> 3</h1>

<p>a + 1 #如果要执行这个，先要def + other
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby的一些方法]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/22/rubyde-%5B%3F%5D-xie-fang-fa/"/>
    <updated>2013-12-22T21:06:53+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/22/rubyde-[?]-xie-fang-fa</id>
    <content type="html"><![CDATA[<p>```
ObjectSpace.each_object(Complex) {|x| puts x }</p>

<p>num.kind_of? Numeric #只要是类的父类即可
num.instance_of? Numeric #只能是实例所属类</p>

<p>Fixnum.ancestors #返回父类和模块的列表</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中有趣的现象]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/22/rubyzhong-you-qu-de-xian-xiang/"/>
    <updated>2013-12-22T20:11:03+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/22/rubyzhong-you-qu-de-xian-xiang</id>
    <content type="html"><![CDATA[<h6>ruby命令执行实际上是在Object的类中执行的，其实定义的方法都是Object的private方法，然而我们又可以改变方法的可见性，而所有的类都是Object的子类，所以可以通过这个办法，给所有的类添加方法,而类本身是Class类的子类，所以所有的类也有了这个添加的方法</h6>

<p><code>
def mm
  p 'mm print'
end
public mm
'a'.mm # =&gt; "mm print"
2.mm # =&gt; "mm print"
class A
end
A.mm # =&gt; "mm print"
</code></p>
]]></content>
  </entry>
  
</feed>
