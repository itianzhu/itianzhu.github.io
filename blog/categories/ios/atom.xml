<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | tz's Blog]]></title>
  <link href="http://itianzhu.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://itianzhu.github.io/"/>
  <updated>2013-12-26T23:41:49+08:00</updated>
  <id>http://itianzhu.github.io/</id>
  <author>
    <name><![CDATA[tz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用摄像头影像作为背景]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/26/shi-yong-she-xiang-tou-ying-xiang-zuo-wei-bei-jing/"/>
    <updated>2013-12-26T23:36:47+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/26/shi-yong-she-xiang-tou-ying-xiang-zuo-wei-bei-jing</id>
    <content type="html"><![CDATA[<p>参考<a href="">https://github.com/kyleroche/Professional_iOS_AugmentedReality</a></p>

<h3>只需要影像和拍照图片</h3>

<p>```
@try {</p>

<pre><code>imagePicker = [[[UIImagePickerController alloc] init] autorelease];
imagePicker.sourceType = UIImagePickerControllerSourceTypeCamera;
imagePicker.showsCameraControls = NO;
imagePicker.toolbarHidden = YES;
imagePicker.navigationBarHidden = YES;
imagePicker.wantsFullScreenLayout = YES;
imagePicker.cameraViewTransform = CGAffineTransformScale(imagePicker.cameraViewTransform, 1.0, 1.3);
</code></pre>

<p>}
@catch (NSException * e) {</p>

<pre><code>[imagePicker release];
 imagePicker = nil;
</code></pre>

<p>}
@finally {</p>

<pre><code>if(imagePicker) {
    [cameraView addSubview:[imagePicker view]];//直接把view加上去
    [cameraView release];
}
</code></pre>

<p>}
<code>
或者使用AVCaptureVideoPreviewLayer显示影像和AVCaptureStillImageOutput获取图片
</code>
//显示影像
AVCaptureSession *session = [[AVCaptureSession alloc] init];
session.sessionPreset = AVCaptureSessionPresetMedium;</p>

<p>AVCaptureVideoPreviewLayer *captureVideoPreviewLayer = [[AVCaptureVideoPreviewLayer alloc] initWithSession:session];
captureVideoPreviewLayer.frame = self.videoPreview.bounds;
[self.videoPreview.layer addSublayer:captureVideoPreviewLayer];</p>

<p>AVCaptureDevice *device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];</p>

<p>NSError <em>error = nil;
AVCaptureDeviceInput </em>input = [AVCaptureDeviceInput deviceInputWithDevice:device error:&amp;error];
if (!input) {</p>

<pre><code>NSLog(@"ERROR: trying to open camera: %@", error);
</code></pre>

<p>}
[session addInput:input];</p>

<p>stillImageOutput = [[AVCaptureStillImageOutput alloc] init];
NSDictionary *outputSettings = [[NSDictionary alloc] initWithObjectsAndKeys: AVVideoCodecJPEG, AVVideoCodecKey, nil];
[stillImageOutput setOutputSettings:outputSettings];</p>

<p>[session addOutput:stillImageOutput];</p>

<p>[session startRunning];</p>

<p>//获取图片
AVCaptureConnection <em>videoConnection = nil;
for (AVCaptureConnection </em>connection in stillImageOutput.connections)
{</p>

<pre><code>for (AVCaptureInputPort *port in [connection inputPorts])
{
    if ([[port mediaType] isEqual:AVMediaTypeVideo] )
    {
        videoConnection = connection;
        break;
    }
}
if (videoConnection) { break; }
</code></pre>

<p>}</p>

<p>[stillImageOutput captureStillImageAsynchronouslyFromConnection:videoConnection completionHandler: ^(CMSampleBufferRef imageSampleBuffer, NSError *error)
{</p>

<pre><code>CFDictionaryRef exifAttachments = CMGetAttachment( imageSampleBuffer, kCGImagePropertyExifDictionary, NULL);
if (exifAttachments)
{
    // Do something with the attachments.
    NSLog(@"attachements: %@", exifAttachments);
}
else
   NSLog(@"no attachments");

NSData *imageData = [AVCaptureStillImageOutput jpegStillImageNSDataRepresentation:imageSampleBuffer];
UIImage *image = [[UIImage alloc] initWithData:imageData];

self.videoImage.image = image;
</code></pre>

<p>}];
```</p>

<h3>需要显示图片和处理每一帧</h3>

<p>```
//显示影像，把上面的stillImage部分换成
AVCaptureVideoDataOutput *output = [[AVCaptureVideoDataOutput alloc] init];
[_session addOutput:output];</p>

<p>dispatch_queue_t queue = dispatch_queue_create(&ldquo;pumpkins&rdquo;, NULL);
[output setSampleBufferDelegate:self queue:queue];
dispatch_release(queue);</p>

<p>output.videoSettings =
[NSDictionary dictionaryWithObject:[NSNumber numberWithInt:kCVPixelFormatType_32BGRA] forKey:(id)kCVPixelBufferPixelFormatTypeKey];</p>

<p>[_session startRunning];
//获取图片在代理中
&ndash; (UIImage *) imageFromSampleBuffer:(CMSampleBufferRef) sampleBuffer
{
}
```
相关方法参考<a href="">https://github.com/kyleroche/Professional_iOS_AugmentedReality/blob/master/Ch8/Ch8/AppDelegate.m</a></p>

<h3>同时他的例子中,通过下面来使Cocos2d和UiViewController共用同一个View</h3>

<p><code>
EAGLView *glView = [EAGLView viewWithFrame:[window bounds] pixelFormat: kEAGLColorFormatRGBA8 depthFormat:0];
[director setOpenGLView:glView];
[viewController setView:glView];
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS使用protobuf传递聊天信息]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/23/iosshi-yong-protobuf/"/>
    <updated>2013-12-23T23:35:32+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/23/iosshi-yong-protobuf</id>
    <content type="html"><![CDATA[<p>protobuf是一种对象的序列化格式。</p>

<h4>使用</h4>

<p>首先要创建定义文件,比如person.proto
<code>
message Person {
  required int32 id = 1;
  required string name = 2;
  optional string email = 3;
}
</code>
然后编译出定义文件的编译器。到<a href="">https://code.google.com/p/metasyntactic/downloads/list</a>下载2.2.0的版本，然后执行
```
./autogen.sh</p>

<p>./configure</p>

<p>./make #在src文件夹下会生成protoc编译器</p>

<p>src/protoc &mdash;proto_path=src &mdash;objc_out=build/objc src/Person.proto
<code>
这样就会在src下生成person.p.m和person.p.h，这里面就有OC的Person类。  
然后到[https://github.com/itianzhu/protobuf-ios]()下载，并把runtime里面的工程，添加进入自己的工程，把上面生成的Person类文件也加入工程，导入#import "ProtocolBuffers.h"和person头文件就可以使用了
</code>
Person <em>person = [[[[Person builder] setId:1] setName:@&ldquo;2&rdquo;] build];
NSDate </em>data = [person data];
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7的切换动画]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/20/ios7de-qie-huan-dong-hua/"/>
    <updated>2013-12-20T22:56:45+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/20/ios7de-qie-huan-dong-hua</id>
    <content type="html"><![CDATA[<p>iOS7中自定义ViewController切换动画
一、简介</p>

<ol>
<li>实现UIViewControllerAnimatedTransitioning协议，这个协议里的方法具体实现动画</li>
<li>实现UINavigationControllerDelegate协议，这个协议里的的方法返回实现上一个协议的实例</li>
<li>子类UINavigationController,这个就是具有自定义切换功能的实例，所有在这个实例中进行的push、pop都会有自定义的动画</li>
</ol>


<p>二、文件简介
{% codeblock lang:objc %}
ITCornerTransiton.m //实现简介第1点
ITNavigationDelegate.m //实现简介第2点
ITNavigationController.m //实现简介第3点
{% endcodeblock %}</p>

<p>三、注意事项</p>

<ol>
<li>简介第1点的实现代码
{% codeblock lang:objc %}
toVC.view.frame = self.toBeganFrame;
[contrainerView addSubview:toVC.view];//(1)
[UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{
 fromVC.view.frame = self.fromEndFrame;
 toVC.view.frame = contrainerView.frame;
} completion:^(BOOL finished) {
 [fromVC.view removeFromSuperview];//(2)
 [transitionContext completeTransition:YES];//(3)
}];
{% endcodeblock %}
(1)新的view一定要自己addSubView<br/>
(2)原来的view一定要自己remove<br/>
(3)一定要通知 完成</li>
<li>简介第3点实现代码
{% codeblock lang:objc %}
self.navDelegate = [[ITNavigationDelegate alloc] init];
((ITNavigationDelegate*)self.navDelegate).delegateType = DelegateTypeBackSlash;
self.delegate = self.navDelegate;
{% endcodeblock %}
在ARC模式下，由于self.delegate是assige的，导致此处创建的ITNavigationDelegate会在方法最后被释放掉，所以一定要自己创建的一个属性来保存</li>
</ol>


<p>具体信息查看代码<a href="https://github.com/itianzhu/TransitionDemo.git">https://github.com/itianzhu/TransitionDemo.git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用GPUImage的例子]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/19/shi-yong-gpuimagede-li-zi/"/>
    <updated>2013-12-19T22:53:13+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/19/shi-yong-gpuimagede-li-zi</id>
    <content type="html"><![CDATA[<p>这是一个使用GPUImage录制实时滤镜录像的例子，会涉及到
&ndash; git submodule 的使用
&ndash; 在项目中引用别的项目
&ndash; GPUImage的逻辑</p>

<p>一、创建工程，到工程的根目录,执行以下操作
<code>
git init
git submodule add git submodule add 'https://github.com/BradLarson/GPUImage.git' GPUImage //会以最后的参数GPUImgae为名创建文件夹，否者默认为项目
// 下面做常规的git操作
</code></p>

<p>二、在项目中引用别的项目</p>

<ol>
<li>把GPUImage项目工程文件添加到当前工程里，拖进去就可以了</li>
<li>在Build Phases/Target Dependencies中添加GPUImage</li>
<li>在Build Phases/Link Binary With Libraries中添加libGPUImage.a,和其它GPUImage需要的lib</li>
<li>在Build Setting中设置Hearder Search Paths中添加GPUImage/framework,并且选择recursive</li>
<li>在info中添加Application supports iTunes file sharing(or raw UIFileSharingEnabled)，这样就可以在iTunes中查看Documents中的文件</li>
</ol>


<p>三、GPUImage的逻辑,其实就是类似流水线
{% codeblock lang:objc %}
self.camera = [[[GPUImageVideoCamera alloc] initWithSessionPreset:AVCaptureSessionPreset640x480 cameraPosition:AVCaptureDevicePositionBack] autorelease];
self.camera.outputImageOrientation = UIInterfaceOrientationPortrait;
self.camera.horizontallyMirrorFrontFacingCamera = NO;
self.camera.horizontallyMirrorRearFacingCamera = NO;</p>

<p>self.filter = [[[GPUImageSepiaFilter alloc] init] autorelease];
[self.camera addTarget:_filter];//类似流水线，camera作为output，而input到filter中</p>

<p>GPUImageView <em>filterView = (GPUImageView </em>)self.view;
[<em>filter addTarget:filterView];//类似流水线，</em>filter作为output，而input到filterView中
{% endcodeblock %}
一个output可以添加多个input，比如后面，filter又添加了一个input:writer
{% codeblock lang:objc %}
self.writer = [[[GPUImageMovieWriter alloc] initWithMovieURL:movieURL size:CGSizeMake(480.0, 640.0)] autorelease];
[self.filter addTarget:self.writer];
{% endcodeblock %}
而录音的输出只有一个，只能赋值
{% codeblock lang:objc %}
self.camera.audioEncodingTarget = self.writer;
{% endcodeblock %}
详细信息可以参考源代码<br/>
<a href="https://github.com/itianzhu/StyleVideoMaker  ">https://github.com/itianzhu/StyleVideoMaker  </a>
clone此代码后，为了使用submodule需要执行
<code>
git submodule init
git submodule update
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block 使用事项]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/18/block-shi-yong-shi-xiang/"/>
    <updated>2013-12-18T22:27:48+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/18/block-shi-yong-shi-xiang</id>
    <content type="html"><![CDATA[<p>block使用事项</p>

<p>1.block是NSObject的子类</p>

<p>2.运行时的block存在栈stack上，比如
{% codeblock lang:objc %}
void (^greetingBlock)(void);           //声明block变量
{  // scope begins, local variables pushed onto stack</p>

<pre><code>  //如 果没有此块的话，不会引起下面的stack pop off
</code></pre>

<p>  greetingBlock = ^{                   //定义blcok变量</p>

<pre><code>NSLog(@"Hello, World!");
</code></pre>

<p>  };
}  // scope ends, stack variables (e.g. the block literal) popped off stack
greetingBlock();  // Block invocation may cause the program to crash!
{% endcodeblock %}</p>

<p>3.block有block_copy()和block_release()方法，来保存在堆上。比如
{% codeblock lang:objc %}
void (^greetingBlock)(void);
{
  greetingBlock = [^{</p>

<pre><code>NSLog(@"Hello, World!");
</code></pre>

<p>} copy]; }
greetingBlock();          // Block invocation works (uses heap storage)
[greetingBlock release];  // released block to prevent memory leak
{% endcodeblock %}
或者
{% codeblock lang:objc %}
void (^greetingBlock)(id salutation);
{
  greetingBloc
  k = Block_copy(^(id salutation){
  NSLog(@&ldquo;%@, World!&rdquo;, salutation);
  });
}
greetingBlock(@&ldquo;Hello&rdquo;);
Block_release(greetingBlock);
{% endcodeblock %}
4.<strong>block变量的处理。在MRR下，不会自动retain这个_block变量。在ARC下，会自动retain，如果不要此默认行为，需要替换使用</strong>weak。</p>

<p>5.在block中使用self,而不产生引用循环，。在MRR下,4里面说过，在这种情况下，_block变量不会retain，但是要注意当[self dealloc]之后不能再调用block：
{% codeblock lang:objc %}
__block ClassName *that = self;
self.block = ^(CGFloat percentComplete) {</p>

<pre><code>[that doSome];
</code></pre>

<p>}
{% endcodeblock %}
在ARC下，使用<strong>weak,当对象dealloc之后，会自动置为nil。
{% codeblock lang:objc %}
</strong>weak ClassName <em>that = self;
__unsafe_unretained ClassName </em>that = self;//for iOS 4.x and up
self.block = ^(CGFloat percentComplete) {</p>

<pre><code>ClassName *this = that;//(1)
[that doSome];
</code></pre>

<p>}//(2)
{% endcodeblock %}
如果有第(1)步，则会在block中产生一个本地的<strong>strong变量，而ARC中所有的变量默认都是</strong>strong的，这样会导致这个变量retained，而这个this本地变量会在第(2)处被释放掉。</p>
]]></content>
  </entry>
  
</feed>
