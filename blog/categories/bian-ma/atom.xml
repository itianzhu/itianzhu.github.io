<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 编码 | tz's Blog]]></title>
  <link href="http://itianzhu.github.io/blog/categories/bian-ma/atom.xml" rel="self"/>
  <link href="http://itianzhu.github.io/"/>
  <updated>2013-12-22T00:07:59+08:00</updated>
  <id>http://itianzhu.github.io/</id>
  <author>
    <name><![CDATA[tz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby中的编码]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/21/rubyzhong-de-bian-ma/"/>
    <updated>2013-12-21T22:46:04+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/21/rubyzhong-de-bian-ma</id>
    <content type="html"><![CDATA[<h3>编码的种类</h3>

<ol>
<li>源文件的编码</li>
<li>变量的编码</li>
<li>I/O的编码</li>
</ol>


<hr>


<h3>查看本机的所有编码</h3>

<p><code>
encodings = Encoding.list.each.with_object({}) do |enc, full_list|
 full_list[enc.name] = [enc.name]
end
Encoding.aliases.each do |alias_name, base_name|
  fail "#{base_name} #{alias_name}" unless encodings[base_name] encodings[base_name] &lt;&lt; alias_name
end
</code></p>

<hr>


<h3>文件的编码</h3>

<ul>
<li>2.0后的Ruby中，文件默认是UTF-8编码，之前是ASCII</li>
<li>在文件的最前面写上如下代码,Ruby会在其中搜索编码字符串</li>
</ul>


<p>```</p>

<h1>coding: utf-8</h1>

<p>```
如果前面有shebang，先写shebang，第二行写coding</p>

<p>```</p>

<h1>!/usr/local/rubybook/bin/ruby</h1>

<h1>encoding:  utf-8</h1>

<p>```
&ndash; Mac OS中得命令行默认是UTF8
&ndash; 每个文件的编码都可以不同
&ndash; ASCII-8BIT就是所谓的binary</p>

<hr>


<h3>变量编码</h3>

<p>1、变量的编码默认是文件的编码
```</p>

<h1>encoding: utf-8</h1>

<p>&ldquo;中&rdquo;.encoding # => &lt;Encoding:UTF-8>
<code>
如果文件中字符不能用标注的编码解析(即那段二进制编码在此编码中不代表字符)，则会报错，比如
</code></p>

<h1>encoding: ascii</h1>

<p>&ldquo;中&rdquo;.encoding # => &lt;Encoding:UTF-8>
aa.rb:2: invalid multibyte char (US-ASCII)
aa.rb:2: invalid multibyte char (US-ASCII)
<code>
2、变量的编码转换，就是把相同字符转换成不同的编码表示，二进制表示会改变
</code>
&lsquo;a&rsquo;.encoding.name # => UTF-8
&lsquo;a&rsquo;.encode(&lsquo;ascii&rsquo;).encoding
 => #&lt;Encoding:US-ASCII>
<code>
如果新的编码中，没有此字符，则会报错，可以如下解决
</code></p>

<h1>encoding: utf-8</h1>

<p>pi = &ldquo;pi = π&rdquo;
puts pi.encode(&ldquo;iso-8859-1&rdquo;, :undef => :replace, :replace => &ldquo;??&rdquo;)</p>

<h1>=> pi = ??</h1>

<p><code>
3、强制转换。是指强制用一种编码去解释一段二进制序列，而不是转换成新的编码，文件的二进制是不会改变的
</code></p>

<h1>encoding: ascii-8bit</h1>

<p>str = &ldquo;\xc3\xa9&rdquo; # e-acute in UTF-8 str.encoding # => #&lt;Encoding:ASCII-8BIT> str.force_encoding(&ldquo;utf-8&rdquo;)
str.bytes.to_a # => [195, 169] str.encoding # => #&lt;Encoding:UTF-8>
<code>
从binary文件读取的时候，也可以使用ecoding的第二个参数表示实际编码
</code></p>

<h1>encoding: ascii-8bit</h1>

<p>original = &ldquo;ol\xe9&rdquo; # e-acute in ISO-8859-1 original.bytes.to_a # => [111, 108, 233] original.encoding # => #&lt;Encoding:ASCII-8BIT> new = original.encode(&ldquo;utf-8&rdquo;, &ldquo;iso-8859-1&rdquo;) new.bytes.to_a # => [111, 108, 195, 169] new.encoding # => #&lt;Encoding:UTF-8>
```</p>

<hr>


<h3>I/O编码</h3>

<h5>标准I/O的编码和命令行的编码是一样的，MacOS的bash默认是UTF-8，从命令行输入的字符是UTF-8，输出到命令行的字符，只有UTF-8能够完全正确</h5>

<h5>文件I/O的编码的方法另外还有：</h5>

<ul>
<li>external_encoding，外部编码，即输入编码</li>
<li>internal_encoding，内部编码，即输出编码
输入编码默认与bash相同，如果文件实际不是这个编码，则会解释不对，但是不会改变二进制表示，可以这样改变
<code>
f = File.open("iso-8859-1.txt", "r:iso-8859-1")
puts f.external_encoding.name
line = f.gets
puts line.encoding
puts line
produces:
    ISO-8859-1
    ISO-8859-1
    ol?
</code>
输出编码默认与输入编码一样，可以这样改变
<code>
f = File.open("iso-8859-1.txt", "r:iso-8859-1:utf-8")
puts f.external_encoding.name
line = f.gets
puts line.encoding
puts line
produces:
    ISO-8859-1
    UTF-8
    olé
</code>
可以在命令行改变输入、输出编码
<code>
$ echo $LANG
$ LANG=ja_JP.sjis ruby -e 'p Encoding.default_external.name'
$ ruby -E sjis:iso-8859-1 -e 'p Encoding.default_internal.name'
$ ruby -E :utf-8
</code></li>
</ul>

]]></content>
  </entry>
  
</feed>
