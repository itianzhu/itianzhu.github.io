<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GPUImage | tz's Blog]]></title>
  <link href="http://itianzhu.github.io/blog/categories/gpuimage/atom.xml" rel="self"/>
  <link href="http://itianzhu.github.io/"/>
  <updated>2013-12-26T23:41:49+08:00</updated>
  <id>http://itianzhu.github.io/</id>
  <author>
    <name><![CDATA[tz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用GPUImage的例子]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/19/shi-yong-gpuimagede-li-zi/"/>
    <updated>2013-12-19T22:53:13+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/19/shi-yong-gpuimagede-li-zi</id>
    <content type="html"><![CDATA[<p>这是一个使用GPUImage录制实时滤镜录像的例子，会涉及到
&ndash; git submodule 的使用
&ndash; 在项目中引用别的项目
&ndash; GPUImage的逻辑</p>

<p>一、创建工程，到工程的根目录,执行以下操作
<code>
git init
git submodule add git submodule add 'https://github.com/BradLarson/GPUImage.git' GPUImage //会以最后的参数GPUImgae为名创建文件夹，否者默认为项目
// 下面做常规的git操作
</code></p>

<p>二、在项目中引用别的项目</p>

<ol>
<li>把GPUImage项目工程文件添加到当前工程里，拖进去就可以了</li>
<li>在Build Phases/Target Dependencies中添加GPUImage</li>
<li>在Build Phases/Link Binary With Libraries中添加libGPUImage.a,和其它GPUImage需要的lib</li>
<li>在Build Setting中设置Hearder Search Paths中添加GPUImage/framework,并且选择recursive</li>
<li>在info中添加Application supports iTunes file sharing(or raw UIFileSharingEnabled)，这样就可以在iTunes中查看Documents中的文件</li>
</ol>


<p>三、GPUImage的逻辑,其实就是类似流水线
{% codeblock lang:objc %}
self.camera = [[[GPUImageVideoCamera alloc] initWithSessionPreset:AVCaptureSessionPreset640x480 cameraPosition:AVCaptureDevicePositionBack] autorelease];
self.camera.outputImageOrientation = UIInterfaceOrientationPortrait;
self.camera.horizontallyMirrorFrontFacingCamera = NO;
self.camera.horizontallyMirrorRearFacingCamera = NO;</p>

<p>self.filter = [[[GPUImageSepiaFilter alloc] init] autorelease];
[self.camera addTarget:_filter];//类似流水线，camera作为output，而input到filter中</p>

<p>GPUImageView <em>filterView = (GPUImageView </em>)self.view;
[<em>filter addTarget:filterView];//类似流水线，</em>filter作为output，而input到filterView中
{% endcodeblock %}
一个output可以添加多个input，比如后面，filter又添加了一个input:writer
{% codeblock lang:objc %}
self.writer = [[[GPUImageMovieWriter alloc] initWithMovieURL:movieURL size:CGSizeMake(480.0, 640.0)] autorelease];
[self.filter addTarget:self.writer];
{% endcodeblock %}
而录音的输出只有一个，只能赋值
{% codeblock lang:objc %}
self.camera.audioEncodingTarget = self.writer;
{% endcodeblock %}
详细信息可以参考源代码<br/>
<a href="https://github.com/itianzhu/StyleVideoMaker  ">https://github.com/itianzhu/StyleVideoMaker  </a>
clone此代码后，为了使用submodule需要执行
<code>
git submodule init
git submodule update
</code></p>
]]></content>
  </entry>
  
</feed>
