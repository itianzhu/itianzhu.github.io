<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tz's Blog]]></title>
  <link href="http://itianzhu.github.io/atom.xml" rel="self"/>
  <link href="http://itianzhu.github.io/"/>
  <updated>2013-12-26T23:39:37+08:00</updated>
  <id>http://itianzhu.github.io/</id>
  <author>
    <name><![CDATA[tz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[翻译]Ruby中的Catch和Throw]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/26/fan-yi-rubyzhong-de-catchhe-throw/"/>
    <updated>2013-12-26T23:38:55+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/26/fan-yi-rubyzhong-de-catchhe-throw</id>
    <content type="html"><![CDATA[<p><a href="http://www.jacopretorius.net/2012/01/catch-and-throw-in-ruby.html">原文地址：http://www.jacopretorius.net/2012/01/catch-and-throw-in-ruby.html</a></p>

<p>异常应该是意外的，Ruby也提供一种轻量的实现。</p>

<h3>例子</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def get_number
</span><span class='line'>  rand(100)
</span><span class='line'>end
</span><span class='line'> 
</span><span class='line'>random_numbers = catch (:random_numbers) do
</span><span class='line'>  result = []
</span><span class='line'>  10.times do
</span><span class='line'>    num = get_number
</span><span class='line'>    throw :random_numbers if num &lt; 10
</span><span class='line'>    result &lt;&lt; num
</span><span class='line'>  end
</span><span class='line'>  result
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>catch带一个参数创建了一个block，这个block在throw触发之前正常执行。<br/>
当throw触发时，Ruby会以它带的参数在调用栈中查找对应的catch语句。然后回退到catch那里，并且停止执行block。<br/>
在这个例子中，block的返回值有两种可能，如果没有小于10的数字触发throw，那么数组会返回。如果触发了throw，那么会返回nil。也可以改变这个返回值，例如，可以通过给throw设置第二个参数，返回一个空数组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>random_numbers = catch (:random_numbers) do
</span><span class='line'>  result = []
</span><span class='line'>  10.times do
</span><span class='line'>    num = get_number
</span><span class='line'>    throw(:random_numbers, []) if num &lt; 10
</span><span class='line'>    result &lt;&lt; num
</span><span class='line'>  end
</span><span class='line'>  result
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>性能</h3>

<p>性能低是不应该在代码中使用太多异常的原因之一。每一个异常的抛出都会建立一个栈跟踪信息。如果你的异常的确是意外，倒没什么。但是如果是用于循环中的流程控制，就会有性能问题。而catch-throw不用建立跟踪信息。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>start = Time.now
</span><span class='line'>10_000_000.times do |i|
</span><span class='line'>  begin
</span><span class='line'>    raise StandardError, "Error #{i}"
</span><span class='line'>  rescue StandardError =&gt; error
</span><span class='line'>    error.inspect
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>puts "Raise&Rescue Operation took #{Time.now - start} seconds"
</span><span class='line'> 
</span><span class='line'>start = Time.now
</span><span class='line'>10_000_000.times do |i|
</span><span class='line'>  catch (:the_loop) do
</span><span class='line'>    throw :the_loop
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>puts "Catch&Throw Operation took #{Time.now - start} seconds"
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://lh4.googleusercontent.com/-Y0q4RW_h-xo/TxXvrMtCCtI/AAAAAAAAAkA/dNT8gKtYmE4/s800/Screen%252520Shot%2525202012-01-17%252520at%2525205.00.06%252520PM.png" alt="" />
这里的性能差异明显。</p>

<h3>总结</h3>

<p>catch-throw适用于退出嵌套的程序流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用摄像头影像作为背景]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/26/shi-yong-she-xiang-tou-ying-xiang-zuo-wei-bei-jing/"/>
    <updated>2013-12-26T23:36:47+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/26/shi-yong-she-xiang-tou-ying-xiang-zuo-wei-bei-jing</id>
    <content type="html"><![CDATA[<p>参考<a href="">https://github.com/kyleroche/Professional_iOS_AugmentedReality</a></p>

<h3>只需要影像和拍照图片</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@try {
</span><span class='line'>    imagePicker = [[[UIImagePickerController alloc] init] autorelease];
</span><span class='line'>    imagePicker.sourceType = UIImagePickerControllerSourceTypeCamera;
</span><span class='line'>    imagePicker.showsCameraControls = NO;
</span><span class='line'>    imagePicker.toolbarHidden = YES;
</span><span class='line'>    imagePicker.navigationBarHidden = YES;
</span><span class='line'>    imagePicker.wantsFullScreenLayout = YES;
</span><span class='line'>    imagePicker.cameraViewTransform = CGAffineTransformScale(imagePicker.cameraViewTransform, 1.0, 1.3);
</span><span class='line'>}
</span><span class='line'>@catch (NSException * e) {
</span><span class='line'>    [imagePicker release];
</span><span class='line'>     imagePicker = nil;
</span><span class='line'>}
</span><span class='line'>@finally {
</span><span class='line'>    if(imagePicker) {
</span><span class='line'>        [cameraView addSubview:[imagePicker view]];//直接把view加上去
</span><span class='line'>        [cameraView release];
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>或者使用AVCaptureVideoPreviewLayer显示影像和AVCaptureStillImageOutput获取图片</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//显示影像
</span><span class='line'>AVCaptureSession *session = [[AVCaptureSession alloc] init];
</span><span class='line'>session.sessionPreset = AVCaptureSessionPresetMedium;
</span><span class='line'>    
</span><span class='line'>AVCaptureVideoPreviewLayer *captureVideoPreviewLayer = [[AVCaptureVideoPreviewLayer alloc] initWithSession:session];
</span><span class='line'>captureVideoPreviewLayer.frame = self.videoPreview.bounds;
</span><span class='line'>[self.videoPreview.layer addSublayer:captureVideoPreviewLayer];
</span><span class='line'>    
</span><span class='line'>AVCaptureDevice *device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
</span><span class='line'>    
</span><span class='line'>NSError *error = nil;
</span><span class='line'>AVCaptureDeviceInput *input = [AVCaptureDeviceInput deviceInputWithDevice:device error:&error];
</span><span class='line'>if (!input) {
</span><span class='line'>    NSLog(@"ERROR: trying to open camera: %@", error);
</span><span class='line'>}
</span><span class='line'>[session addInput:input];
</span><span class='line'>    
</span><span class='line'>stillImageOutput = [[AVCaptureStillImageOutput alloc] init];
</span><span class='line'>NSDictionary *outputSettings = [[NSDictionary alloc] initWithObjectsAndKeys: AVVideoCodecJPEG, AVVideoCodecKey, nil];
</span><span class='line'>[stillImageOutput setOutputSettings:outputSettings];
</span><span class='line'>    
</span><span class='line'>[session addOutput:stillImageOutput];
</span><span class='line'>    
</span><span class='line'>[session startRunning];
</span><span class='line'>
</span><span class='line'>//获取图片
</span><span class='line'>AVCaptureConnection *videoConnection = nil;
</span><span class='line'>for (AVCaptureConnection *connection in stillImageOutput.connections)
</span><span class='line'>{
</span><span class='line'>    for (AVCaptureInputPort *port in [connection inputPorts])
</span><span class='line'>    {
</span><span class='line'>        if ([[port mediaType] isEqual:AVMediaTypeVideo] )
</span><span class='line'>        {
</span><span class='line'>            videoConnection = connection;
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    if (videoConnection) { break; }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>[stillImageOutput captureStillImageAsynchronouslyFromConnection:videoConnection completionHandler: ^(CMSampleBufferRef imageSampleBuffer, NSError *error)
</span><span class='line'>{
</span><span class='line'>    CFDictionaryRef exifAttachments = CMGetAttachment( imageSampleBuffer, kCGImagePropertyExifDictionary, NULL);
</span><span class='line'>    if (exifAttachments)
</span><span class='line'>    {
</span><span class='line'>        // Do something with the attachments.
</span><span class='line'>        NSLog(@"attachements: %@", exifAttachments);
</span><span class='line'>    }
</span><span class='line'>    else
</span><span class='line'>       NSLog(@"no attachments");
</span><span class='line'>     
</span><span class='line'>    NSData *imageData = [AVCaptureStillImageOutput jpegStillImageNSDataRepresentation:imageSampleBuffer];
</span><span class='line'>    UIImage *image = [[UIImage alloc] initWithData:imageData];
</span><span class='line'>     
</span><span class='line'>    self.videoImage.image = image;
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<h3>需要显示图片和处理每一帧</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//显示影像，把上面的stillImage部分换成
</span><span class='line'>AVCaptureVideoDataOutput *output = [[AVCaptureVideoDataOutput alloc] init];
</span><span class='line'>[_session addOutput:output];
</span><span class='line'>    
</span><span class='line'>dispatch_queue_t queue = dispatch_queue_create("pumpkins", NULL);
</span><span class='line'>[output setSampleBufferDelegate:self queue:queue];
</span><span class='line'>dispatch_release(queue);
</span><span class='line'>    
</span><span class='line'>output.videoSettings = 
</span><span class='line'>[NSDictionary dictionaryWithObject:[NSNumber numberWithInt:kCVPixelFormatType_32BGRA] forKey:(id)kCVPixelBufferPixelFormatTypeKey];
</span><span class='line'>    
</span><span class='line'>[_session startRunning];
</span><span class='line'>//获取图片在代理中
</span><span class='line'>- (UIImage *) imageFromSampleBuffer:(CMSampleBufferRef) sampleBuffer 
</span><span class='line'>{
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>相关方法参考<a href="">https://github.com/kyleroche/Professional_iOS_AugmentedReality/blob/master/Ch8/Ch8/AppDelegate.m</a></p>

<h3>同时他的例子中,通过下面来使Cocos2d和UiViewController共用同一个View</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EAGLView *glView = [EAGLView viewWithFrame:[window bounds] pixelFormat: kEAGLColorFormatRGBA8 depthFormat:0];
</span><span class='line'>[director setOpenGLView:glView];
</span><span class='line'>[viewController setView:glView];</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS使用protobuf传递聊天信息]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/23/iosshi-yong-protobuf/"/>
    <updated>2013-12-23T23:35:32+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/23/iosshi-yong-protobuf</id>
    <content type="html"><![CDATA[<p>protobuf是一种对象的序列化格式。</p>

<h4>使用</h4>

<p>首先要创建定义文件,比如person.proto</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>message Person {
</span><span class='line'>  required int32 id = 1;
</span><span class='line'>  required string name = 2;
</span><span class='line'>  optional string email = 3;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>然后编译出定义文件的编译器。到<a href="">https://code.google.com/p/metasyntactic/downloads/list</a>下载2.2.0的版本，然后执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./autogen.sh
</span><span class='line'>
</span><span class='line'>./configure
</span><span class='line'>
</span><span class='line'>./make #在src文件夹下会生成protoc编译器
</span><span class='line'>
</span><span class='line'>src/protoc --proto_path=src --objc_out=build/objc src/Person.proto</span></code></pre></td></tr></table></div></figure>


<p>这样就会在src下生成person.p.m和person.p.h，这里面就有OC的Person类。<br/>
然后到<a href="">https://github.com/itianzhu/protobuf-ios</a>下载，并把runtime里面的工程，添加进入自己的工程，把上面生成的Person类文件也加入工程，导入#import &ldquo;ProtocolBuffers.h&#8221;和person头文件就可以使用了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Person *person = [[[[Person builder] setId:1] setName:@"2"] build];
</span><span class='line'>NSDate *data = [person data];</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在本机创建一个简单的临时服务器]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/22/zai-ben-ji-chuang-jian-%5B%3F%5D-ge-jian-dan-de-lin-shi-fu-wu-qi/"/>
    <updated>2013-12-22T22:41:42+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/22/zai-ben-ji-chuang-jian-[?]-ge-jian-dan-de-lin-shi-fu-wu-qi</id>
    <content type="html"><![CDATA[<p>以前，我想要临时创建一个服务器供别人访问时，都会打开lamp，如果没有安装的话，还要安装半天，然后还有许多是不需要的东西。可以这样创建一个服务器,首先</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install webrick</span></code></pre></td></tr></table></div></figure>


<p>然后代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'webrick'
</span><span class='line'>server = WEBrcik::HTTPServer.new :port =&gt; 8000, :path =&gt; "./"
</span><span class='line'>trap 'INT' do server.shutdowm end
</span><span class='line'>server.start</span></code></pre></td></tr></table></div></figure>


<p>这样就在当前命令行所在目录建立了一个静态目录。端口和根目录都可以改。
当然webrick不仅仅可以用来做静态访问，详情访问<a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/webrick/rdoc/WEBrick.html%E3%80%82">http://www.ruby-doc.org/stdlib-2.0/libdoc/webrick/rdoc/WEBrick.html%E3%80%82</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby调试]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/22/rubydiao-shi/"/>
    <updated>2013-12-22T22:16:47+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/22/rubydiao-shi</id>
    <content type="html"><![CDATA[<p>开始调试</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -r debug test.rb</span></code></pre></td></tr></table></div></figure>


<p>支持的命令，参考<a href="http://www.zenspider.com/Languages/Ruby/QuickRef.html#debugger">http://www.zenspider.com/Languages/Ruby/QuickRef.html#debugger</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>b[reak] [file:|class:]&lt;line|method
</span><span class='line'>b[reak] [class.]&lt;line|method
</span><span class='line'>                           set breakpoint to some position
</span><span class='line'>wat[ch] expression         set watchpoint to some expression
</span><span class='line'>cat[ch] exception          set catchpoint to an exception
</span><span class='line'>b[reak]                    list breakpoints
</span><span class='line'>cat[ch]                    show catchpoint
</span><span class='line'>del[ete][ nnn]             delete some or all breakpoints
</span><span class='line'>disp[lay] expression       add expression into display expression list
</span><span class='line'>undisp[lay][ nnn]          delete one particular or all display expressions
</span><span class='line'>c[ont]                     run until program ends or hit breakpoint
</span><span class='line'>s[tep][ nnn]               step (into methods) one line or till line nnn
</span><span class='line'>n[ext][ nnn]               go over one line or till line nnn
</span><span class='line'>w[here]                    display frames
</span><span class='line'>f[rame]                    alias for where
</span><span class='line'>l[ist][ (-|nn-mm)]         list program, - lists backwards
</span><span class='line'>                           nn-mm lists given lines
</span><span class='line'>up[ nn]                    move to higher frame
</span><span class='line'>down[ nn]                  move to lower frame
</span><span class='line'>fin[ish]                   return to outer frame
</span><span class='line'>tr[ace] (on|off)           set trace mode of current thread
</span><span class='line'>tr[ace] (on|off) all       set trace mode of all threads
</span><span class='line'>q[uit]                     exit from debugger
</span><span class='line'>v[ar] g[lobal]             show global variables
</span><span class='line'>v[ar] l[ocal]              show local variables
</span><span class='line'>v[ar] i[nstance] object    show instance variables of object
</span><span class='line'>v[ar] c[onst] object       show constants of object
</span><span class='line'>m[ethod] i[nstance] obj    show methods of object
</span><span class='line'>m[ethod] class|module      show instance methods of class or module
</span><span class='line'>th[read] l[ist]            list all threads
</span><span class='line'>th[read] c[ur[rent]]       show current thread
</span><span class='line'>th[read] [sw[itch]] nnn    switch thread context to nnn
</span><span class='line'>th[read] stop nnn          stop thread nnn
</span><span class='line'>th[read] resume nnn        resume thread nnn
</span><span class='line'>p expression               evaluate expression and print its value
</span><span class='line'>h[elp]                     print this help
</span><span class='line'>everything else            evaluate
</span><span class='line'>empty                      repeats the last command</span></code></pre></td></tr></table></div></figure>


<p>或者使用<a href="http://bashdb.sourceforge.net/ruby-debug.html">ruby-debug</a>等</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby the Standard Protocols and Coercions]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/22/ruby-the-standard-protocols-and-coercions/"/>
    <updated>2013-12-22T21:51:24+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/22/ruby-the-standard-protocols-and-coercions</id>
    <content type="html"><![CDATA[<h2>Standard Protocols</h2>

<p>Ruby中定义了一些默认调用的方法，比如作为p 的参数时就会默认调用to_s</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>to_a
</span><span class='line'>to_i
</span><span class='line'>to_enum
</span><span class='line'>to_hash
</span><span class='line'>to_io
</span><span class='line'>to_proc
</span><span class='line'>#.......</span></code></pre></td></tr></table></div></figure>


<p>下面是Symbol中实现的to_proc</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def to_proc
</span><span class='line'>  proc {|obj, *args| obj.send(self,*args)}
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h5>当用&amp;调用时就会去调用这个方法，我们自己的类实现这个后，也可有这个功能</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class A &lt; String
</span><span class='line'>  def to_proc
</span><span class='line'>    proc {|obj, *args| obj.send(:length,*args)}
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>a = A.new
</span><span class='line'>words = %w{bbb cccc fffff}
</span><span class='line'>words.map(&a)</span></code></pre></td></tr></table></div></figure>


<h2>Coercions</h2>

<p>在operate操作时，判定应该谁调用谁，所以有时候是参数调用了receiver。返回的第一个是参数，第二个是应该作为receiver。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.coerce(2.3) # =&gt; [2.3, 1.0]</span></code></pre></td></tr></table></div></figure>


<p>可以自己实现这个方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class A
</span><span class='line'>  def coerce other
</span><span class='line'>    #===在Module上调用时，是子类的意思，
</span><span class='line'>    #object上简单等同于==
</span><span class='line'>    if Fixnum === other 
</span><span class='line'>      [other,2]
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>a = A.new
</span><span class='line'>1 + a
</span><span class='line'># =&gt; 3
</span><span class='line'>a + 1 #如果要执行这个，先要def + other</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby的一些方法]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/22/rubyde-%5B%3F%5D-xie-fang-fa/"/>
    <updated>2013-12-22T21:06:53+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/22/rubyde-[?]-xie-fang-fa</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ObjectSpace.each_object(Complex) {|x| puts x }
</span><span class='line'>
</span><span class='line'>num.kind_of? Numeric #只要是类的父类即可
</span><span class='line'>num.instance_of? Numeric #只能是实例所属类
</span><span class='line'>
</span><span class='line'>Fixnum.ancestors #返回父类和模块的列表
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中有趣的现象]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/22/rubyzhong-you-qu-de-xian-xiang/"/>
    <updated>2013-12-22T20:11:03+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/22/rubyzhong-you-qu-de-xian-xiang</id>
    <content type="html"><![CDATA[<h6>ruby命令执行实际上是在Object的类中执行的，其实定义的方法都是Object的private方法，然而我们又可以改变方法的可见性，而所有的类都是Object的子类，所以可以通过这个办法，给所有的类添加方法,而类本身是Class类的子类，所以所有的类也有了这个添加的方法</h6>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def mm
</span><span class='line'>  p 'mm print'
</span><span class='line'>end
</span><span class='line'>public mm
</span><span class='line'>'a'.mm # =&gt; "mm print"
</span><span class='line'>2.mm # =&gt; "mm print"
</span><span class='line'>class A
</span><span class='line'>end
</span><span class='line'>A.mm # =&gt; "mm print"</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby线程和进程]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/22/rubyxian-cheng-he-jin-cheng/"/>
    <updated>2013-12-22T00:04:56+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/22/rubyxian-cheng-he-jin-cheng</id>
    <content type="html"><![CDATA[<h3>线程的创建</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>thead = Thread.new("www.google.com") do |url|
</span><span class='line'>  Thead.current[:count] = 1;
</span><span class='line'>  http = Net::HTTP.new(url, 80)
</span><span class='line'>  print "Fetching: #{url}\n"
</span><span class='line'>  res = http.get('/')
</span><span class='line'>  print "Got #{url}: #{res.message}\n"
</span><span class='line'>  "hi"
</span><span class='line'>end
</span><span class='line'>thead.join
</span><span class='line'>p thead[:count]
</span><span class='line'>p thead.value</span></code></pre></td></tr></table></div></figure>


<h3>线程的方法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Thead#jion #主线程等待
</span><span class='line'>Thead#value #等待返回Thead的最后一个代码的返回值
</span><span class='line'>Thread#status
</span><span class='line'>Thread#alive?
</span><span class='line'>Thread#priority=
</span><span class='line'>Thead#current</span></code></pre></td></tr></table></div></figure>


<h3>线程变量</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Thead.current[:count] = 1;</span></code></pre></td></tr></table></div></figure>


<h3>线程异常</h3>

<p>如果没有调用thead.jo&#8217;in则线程里面的异常不会引起主线程的崩溃，如果调用join，可以通过设置类变量来避免</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Thead.abort_on_exception = false</span></code></pre></td></tr></table></div></figure>


<h3>线程加锁</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mutex = Mutex.new
</span><span class='line'>threads = 10.times.map do
</span><span class='line'>  Thread.new do 100_000.times do
</span><span class='line'>  mutex.lock
</span><span class='line'>
</span><span class='line'>  mutex.unlock 
</span><span class='line'>end </span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mutex = Mutex.new
</span><span class='line'>threads = 10.times.map do
</span><span class='line'>Thread.new do 100_000.times do
</span><span class='line'>  mutex.synchronize do 
</span><span class='line'>    
</span><span class='line'>  end
</span><span class='line'>end </span></code></pre></td></tr></table></div></figure>


<h5>如果想取得锁但是又不想暂停当前线程调用try_lock,如果想暂时解锁锁，可以调用sleep</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rate_mutex = Mutex.new
</span><span class='line'>exchange_rates = ExchangeRates.new
</span><span class='line'>exchange_rates.update_from_online_feed
</span><span class='line'>  Thread.new do rate_mutex.lock 
</span><span class='line'>  loop do
</span><span class='line'>    rate_mutex.sleep 3600
</span><span class='line'>    exchange_rates.update_from_online_feed
</span><span class='line'>  end 
</span><span class='line'>end
</span><span class='line'>loop do
</span><span class='line'>  print "Enter currency code and amount: " 
</span><span class='line'>  line = gets
</span><span class='line'>  if rate_mutex.try_lock
</span><span class='line'>    puts(exchange_rates.convert(line)) ensure rate_mutex.unlock 
</span><span class='line'>  else
</span><span class='line'>    puts "Sorry, rates being updated. Try again in a minute" 
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>创建进程</h3>

<p>这两个方法是同步的，除了这两个，其它的都是不同步的，主进程可以先退出，而子进程不会被主进程退出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system("tar xzf test.tgz") # =&gt; true 只返回成功与否
</span><span class='line'>`date` # =&gt; "Mon May 27 12:31:17 CDT 2013\n"
</span><span class='line'>$? #返回最后一个进程的返回值</span></code></pre></td></tr></table></div></figure>


<h5>如果需要输入、输出。这些不是同步</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pig = IO.popen("local/util/pig", "w+") pig.puts "ice cream after they go to bed" pig.close_write #发送end-of-file给pig的输入
</span><span class='line'>puts pig.gets
</span><span class='line'>
</span><span class='line'>################## 我是分割线
</span><span class='line'>
</span><span class='line'>IO.popen("date") {|f| puts "Date is #{f.gets}" }
</span><span class='line'>
</span><span class='line'>################## 我是分割线
</span><span class='line'>
</span><span class='line'>fork do
</span><span class='line'>  puts "In child, pid = #$$" 
</span><span class='line'>  exit 99
</span><span class='line'>end
</span><span class='line'>pid = Process.wait
</span><span class='line'>puts "Child terminated, pid = #{pid}, status = #{$?.exitstatus}"
</span><span class='line'>#produces:
</span><span class='line'>#In child, pid = 22033
</span><span class='line'>#Child terminated, pid = 22033, status = 99</span></code></pre></td></tr></table></div></figure>


<h3>子进程交互,只在支持fork的操作系统上有用，windows不支持</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pipe = IO.popen("-","w+")  #进程的第一个参数必须为 "-" minus sign
</span><span class='line'>if pipe
</span><span class='line'>  pipe.puts "Get a job!"
</span><span class='line'>  STDERR.puts "Child says '#{pipe.gets.chomp}'" 
</span><span class='line'>else
</span><span class='line'>  这里是子进程执行的
</span><span class='line'>  STDERR.puts "Dad says '#{gets.chomp}'"
</span><span class='line'>  puts "OK" 
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>独立子进程</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exec("sort testfile &gt; output.txt") if fork.nil? 
</span><span class='line'># exec在子进程执行，因为fork.nil在子进程中为真
</span><span class='line'>Process.wait
</span><span class='line'>
</span><span class='line'>############# 我是分割线
</span><span class='line'>
</span><span class='line'>trap("CLD") do
</span><span class='line'>pid = Process.wait
</span><span class='line'>puts "Child pid #{pid}: terminated"
</span><span class='line'>end
</span><span class='line'>fork { exec("sort testfile &gt; output.txt") }
</span><span class='line'>
</span><span class='line'>#produces:
</span><span class='line'>#Child pid 123456: terminated
</span><span class='line'>
</span><span class='line'>############# 我是分割线
</span><span class='line'>
</span><span class='line'>#这个表明子进程不会退出
</span><span class='line'>fork do
</span><span class='line'>  5.times do
</span><span class='line'>    sleep 1
</span><span class='line'>    puts "I'm an orphan!"
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>abort "Parent process died..."</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中的编码]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/21/rubyzhong-de-bian-ma/"/>
    <updated>2013-12-21T22:46:04+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/21/rubyzhong-de-bian-ma</id>
    <content type="html"><![CDATA[<h3>编码的种类</h3>

<ol>
<li>源文件的编码</li>
<li>变量的编码</li>
<li>I/O的编码</li>
</ol>


<hr>


<h3>查看本机的所有编码</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>encodings = Encoding.list.each.with_object({}) do |enc, full_list| 
</span><span class='line'> full_list[enc.name] = [enc.name]
</span><span class='line'>end
</span><span class='line'>Encoding.aliases.each do |alias_name, base_name|
</span><span class='line'>  fail "#{base_name} #{alias_name}" unless encodings[base_name] encodings[base_name] &lt;&lt; alias_name
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<hr>


<h3>文件的编码</h3>

<ul>
<li>2.0后的Ruby中，文件默认是UTF-8编码，之前是ASCII</li>
<li>在文件的最前面写上如下代码,Ruby会在其中搜索编码字符串</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#coding: utf-8</span></code></pre></td></tr></table></div></figure>


<p>如果前面有shebang，先写shebang，第二行写coding</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/local/rubybook/bin/ruby
</span><span class='line'>#  encoding:  utf-8</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Mac OS中得命令行默认是UTF8</li>
<li>每个文件的编码都可以不同</li>
<li>ASCII-8BIT就是所谓的binary</li>
</ul>


<hr>


<h3>变量编码</h3>

<p>1、变量的编码默认是文件的编码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># encoding: utf-8
</span><span class='line'>"中".encoding # =&gt; &lt;Encoding:UTF-8&gt;</span></code></pre></td></tr></table></div></figure>


<p>如果文件中字符不能用标注的编码解析(即那段二进制编码在此编码中不代表字符)，则会报错，比如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># encoding: ascii
</span><span class='line'>"中".encoding # =&gt; &lt;Encoding:UTF-8&gt;
</span><span class='line'>aa.rb:2: invalid multibyte char (US-ASCII)
</span><span class='line'>aa.rb:2: invalid multibyte char (US-ASCII)</span></code></pre></td></tr></table></div></figure>


<p>2、变量的编码转换，就是把相同字符转换成不同的编码表示，二进制表示会改变</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'a'.encoding.name # =&gt; UTF-8
</span><span class='line'>'a'.encode('ascii').encoding
</span><span class='line'> =&gt; #&lt;Encoding:US-ASCII&gt;</span></code></pre></td></tr></table></div></figure>


<p>如果新的编码中，没有此字符，则会报错，可以如下解决</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># encoding: utf-8
</span><span class='line'>pi = "pi = π"
</span><span class='line'>puts pi.encode("iso-8859-1", :undef =&gt; :replace, :replace =&gt; "??")
</span><span class='line'># =&gt; pi = ??</span></code></pre></td></tr></table></div></figure>


<p>3、强制转换。是指强制用一种编码去解释一段二进制序列，而不是转换成新的编码，文件的二进制是不会改变的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># encoding: ascii-8bit
</span><span class='line'>str = "\xc3\xa9" # e-acute in UTF-8 str.encoding # =&gt; #&lt;Encoding:ASCII-8BIT&gt; str.force_encoding("utf-8")
</span><span class='line'>str.bytes.to_a # =&gt; [195, 169] str.encoding # =&gt; #&lt;Encoding:UTF-8&gt;</span></code></pre></td></tr></table></div></figure>


<p>从binary文件读取的时候，也可以使用ecoding的第二个参数表示实际编码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># encoding: ascii-8bit
</span><span class='line'>original = "ol\xe9" # e-acute in ISO-8859-1 original.bytes.to_a # =&gt; [111, 108, 233] original.encoding # =&gt; #&lt;Encoding:ASCII-8BIT&gt; new = original.encode("utf-8", "iso-8859-1") new.bytes.to_a # =&gt; [111, 108, 195, 169] new.encoding # =&gt; #&lt;Encoding:UTF-8&gt;</span></code></pre></td></tr></table></div></figure>


<hr>


<h3>I/O编码</h3>

<h5>标准I/O的编码和命令行的编码是一样的，MacOS的bash默认是UTF-8，从命令行输入的字符是UTF-8，输出到命令行的字符，只有UTF-8能够完全正确</h5>

<h5>文件I/O的编码的方法另外还有：</h5>

<ul>
<li>external_encoding，外部编码，即输入编码</li>
<li>internal_encoding，内部编码，即输出编码
输入编码默认与bash相同，如果文件实际不是这个编码，则会解释不对，但是不会改变二进制表示，可以这样改变</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>f = File.open("iso-8859-1.txt", "r:iso-8859-1") 
</span><span class='line'>puts f.external_encoding.name
</span><span class='line'>line = f.gets
</span><span class='line'>puts line.encoding
</span><span class='line'>puts line
</span><span class='line'>produces:
</span><span class='line'>       ISO-8859-1
</span><span class='line'>       ISO-8859-1
</span><span class='line'>       ol?</span></code></pre></td></tr></table></div></figure>


<p>输出编码默认与输入编码一样，可以这样改变</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>f = File.open("iso-8859-1.txt", "r:iso-8859-1:utf-8") 
</span><span class='line'>puts f.external_encoding.name
</span><span class='line'>line = f.gets
</span><span class='line'>puts line.encoding
</span><span class='line'>puts line
</span><span class='line'>produces:
</span><span class='line'>       ISO-8859-1
</span><span class='line'>       UTF-8
</span><span class='line'>       olé</span></code></pre></td></tr></table></div></figure>


<p>可以在命令行改变输入、输出编码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $LANG
</span><span class='line'>$ LANG=ja_JP.sjis ruby -e 'p Encoding.default_external.name'
</span><span class='line'>$ ruby -E sjis:iso-8859-1 -e 'p Encoding.default_internal.name'
</span><span class='line'>$ ruby -E :utf-8</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7的切换动画]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/20/ios7de-qie-huan-dong-hua/"/>
    <updated>2013-12-20T22:56:45+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/20/ios7de-qie-huan-dong-hua</id>
    <content type="html"><![CDATA[<p>iOS7中自定义ViewController切换动画
一、简介</p>

<ol>
<li>实现UIViewControllerAnimatedTransitioning协议，这个协议里的方法具体实现动画</li>
<li>实现UINavigationControllerDelegate协议，这个协议里的的方法返回实现上一个协议的实例</li>
<li>子类UINavigationController,这个就是具有自定义切换功能的实例，所有在这个实例中进行的push、pop都会有自定义的动画</li>
</ol>


<p>二、文件简介</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">ITCornerTransiton</span><span class="p">.</span><span class="n">m</span> <span class="c1">//实现简介第1点</span>
</span><span class='line'><span class="n">ITNavigationDelegate</span><span class="p">.</span><span class="n">m</span> <span class="c1">//实现简介第2点</span>
</span><span class='line'><span class="n">ITNavigationController</span><span class="p">.</span><span class="n">m</span> <span class="c1">//实现简介第3点</span>
</span></code></pre></td></tr></table></div></figure>


<p>三、注意事项</p>

<ol>
<li>简介第1点的实现代码</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">toVC</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">toBeganFrame</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">contrainerView</span> <span class="nl">addSubview:</span><span class="n">toVC</span><span class="p">.</span><span class="n">view</span><span class="p">];</span><span class="c1">//(1)</span>
</span><span class='line'><span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="p">[</span><span class="n">self</span> <span class="nl">transitionDuration:</span><span class="n">transitionContext</span><span class="p">]</span> <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">fromVC</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">fromEndFrame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">toVC</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">contrainerView</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">fromVC</span><span class="p">.</span><span class="n">view</span> <span class="n">removeFromSuperview</span><span class="p">];</span><span class="c1">//(2)</span>
</span><span class='line'>    <span class="p">[</span><span class="n">transitionContext</span> <span class="nl">completeTransition:</span><span class="n">YES</span><span class="p">];</span><span class="c1">//(3)</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>(1)新的view一定要自己addSubView<br/>
(2)原来的view一定要自己remove<br/>
(3)一定要通知 完成<br/>
2. 简介第3点实现代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">navDelegate</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ITNavigationDelegate</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">((</span><span class="n">ITNavigationDelegate</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">navDelegate</span><span class="p">).</span><span class="n">delegateType</span> <span class="o">=</span> <span class="n">DelegateTypeBackSlash</span><span class="p">;</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">navDelegate</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在ARC模式下，由于self.delegate是assige的，导致此处创建的ITNavigationDelegate会在方法最后被释放掉，所以一定要自己创建的一个属性来保存</p>

<p>具体信息查看代码<a href="https://github.com/itianzhu/TransitionDemo.git">https://github.com/itianzhu/TransitionDemo.git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用GPUImage的例子]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/19/shi-yong-gpuimagede-li-zi/"/>
    <updated>2013-12-19T22:53:13+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/19/shi-yong-gpuimagede-li-zi</id>
    <content type="html"><![CDATA[<p>这是一个使用GPUImage录制实时滤镜录像的例子，会涉及到
&ndash; git submodule 的使用
&ndash; 在项目中引用别的项目
&ndash; GPUImage的逻辑</p>

<p>一、创建工程，到工程的根目录,执行以下操作</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init
</span><span class='line'>git submodule add git submodule add 'https://github.com/BradLarson/GPUImage.git' GPUImage //会以最后的参数GPUImgae为名创建文件夹，否者默认为项目
</span><span class='line'>// 下面做常规的git操作</span></code></pre></td></tr></table></div></figure>


<p>二、在项目中引用别的项目</p>

<ol>
<li>把GPUImage项目工程文件添加到当前工程里，拖进去就可以了</li>
<li>在Build Phases/Target Dependencies中添加GPUImage</li>
<li>在Build Phases/Link Binary With Libraries中添加libGPUImage.a,和其它GPUImage需要的lib</li>
<li>在Build Setting中设置Hearder Search Paths中添加GPUImage/framework,并且选择recursive</li>
<li>在info中添加Application supports iTunes file sharing(or raw UIFileSharingEnabled)，这样就可以在iTunes中查看Documents中的文件</li>
</ol>


<p>三、GPUImage的逻辑,其实就是类似流水线</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">camera</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">GPUImageVideoCamera</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSessionPreset:</span><span class="n">AVCaptureSessionPreset640x480</span> <span class="nl">cameraPosition:</span><span class="n">AVCaptureDevicePositionBack</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">camera</span><span class="p">.</span><span class="n">outputImageOrientation</span> <span class="o">=</span> <span class="n">UIInterfaceOrientationPortrait</span><span class="p">;</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">camera</span><span class="p">.</span><span class="n">horizontallyMirrorFrontFacingCamera</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">camera</span><span class="p">.</span><span class="n">horizontallyMirrorRearFacingCamera</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">filter</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">GPUImageSepiaFilter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">camera</span> <span class="nl">addTarget:</span><span class="n">_filter</span><span class="p">];</span><span class="c1">//类似流水线，camera作为output，而input到filter中</span>
</span><span class='line'>
</span><span class='line'><span class="n">GPUImageView</span> <span class="o">*</span><span class="n">filterView</span> <span class="o">=</span> <span class="p">(</span><span class="n">GPUImageView</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">_filter</span> <span class="nl">addTarget:</span><span class="n">filterView</span><span class="p">];</span><span class="c1">//类似流水线，_filter作为output，而input到filterView中</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个output可以添加多个input，比如后面，filter又添加了一个input:writer</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">writer</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">GPUImageMovieWriter</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithMovieURL:</span><span class="n">movieURL</span> <span class="nl">size:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mf">480.0</span><span class="p">,</span> <span class="mf">640.0</span><span class="p">)]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">filter</span> <span class="nl">addTarget:</span><span class="n">self</span><span class="p">.</span><span class="n">writer</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>而录音的输出只有一个，只能赋值</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">camera</span><span class="p">.</span><span class="n">audioEncodingTarget</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">writer</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>详细信息可以参考源代码<br/>
<a href="https://github.com/itianzhu/StyleVideoMaker  ">https://github.com/itianzhu/StyleVideoMaker  </a>
clone此代码后，为了使用submodule需要执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git submodule init
</span><span class='line'>git submodule update</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用rake的例子]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/19/shi-yong-rakede-li-zi/"/>
    <updated>2013-12-19T22:50:57+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/19/shi-yong-rakede-li-zi</id>
    <content type="html"><![CDATA[<p>假设复制了一段代码到文件test/file.rb中(一定要在一个空文件夹里实验)，但是行首的行号也被复制了，现在需要把行号去掉</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 ruby1
</span><span class='line'>2 ruby1
</span><span class='line'>3 ruby1
</span><span class='line'>4 ruby1
</span><span class='line'>5 ruby1</span></code></pre></td></tr></table></div></figure>


<p>在那个文件目录下，新建一个文件Rakefile写入以下代码</p>

<div>
  <pre><code class='ruby'>desc &quot;delete lineno&quot;
task :delete_lineno do
  files = Dir['*.rb']
  files.each do |sourceFileName|
    newFileName = [&quot;new_&quot;,sourceFileName].join(&quot;&quot;)
    open(sourceFileName,&quot;r&quot;) do |sourceFile|
      open(newFileName,&quot;w&quot;) do |newFile|
        while line = sourceFile.gets
          newFile.puts line.split[1]
        end
      end
    end
  end
end</code></pre>
</div>


<p>然后再当前目录下执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake delete_no</span></code></pre></td></tr></table></div></figure>


<p>在代码中没有使用File.open而是直接open，这是因为rake自动导入File。<br/>
在文件中就会创建一个新的new_file.rb为需要的内容
要查看当前rake有哪些方法可以运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake -T
</span><span class='line'>rake delete_no  # delete lineno</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block 使用事项]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/18/block-shi-yong-shi-xiang/"/>
    <updated>2013-12-18T22:27:48+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/18/block-shi-yong-shi-xiang</id>
    <content type="html"><![CDATA[<p>block使用事项</p>

<p>1.block是NSObject的子类</p>

<p>2.运行时的block存在栈stack上，比如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">greetingBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>           <span class="c1">//声明block变量</span>
</span><span class='line'><span class="p">{</span>  <span class="c1">// scope begins, local variables pushed onto stack</span>
</span><span class='line'>      <span class="c1">//如 果没有此块的话，不会引起下面的stack pop off</span>
</span><span class='line'>  <span class="n">greetingBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>                   <span class="c1">//定义blcok变量</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hello, World!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>  <span class="c1">// scope ends, stack variables (e.g. the block literal) popped off stack</span>
</span><span class='line'><span class="n">greetingBlock</span><span class="p">();</span>  <span class="c1">// Block invocation may cause the program to crash!</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.block有block_copy()和block_release()方法，来保存在堆上。比如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">greetingBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">greetingBlock</span> <span class="o">=</span> <span class="p">[</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hello, World!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="n">copy</span><span class="p">];</span> <span class="p">}</span>
</span><span class='line'><span class="n">greetingBlock</span><span class="p">();</span>          <span class="c1">// Block invocation works (uses heap storage)</span>
</span><span class='line'><span class="p">[</span><span class="n">greetingBlock</span> <span class="n">release</span><span class="p">];</span>  <span class="c1">// released block to prevent memory leak</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">greetingBlock</span><span class="p">)(</span><span class="kt">id</span> <span class="n">salutation</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">greetingBloc</span>
</span><span class='line'>  <span class="n">k</span> <span class="o">=</span> <span class="n">Block_copy</span><span class="p">(</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">salutation</span><span class="p">){</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@, World!&quot;</span><span class="p">,</span> <span class="n">salutation</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">greetingBlock</span><span class="p">(</span><span class="s">@&quot;Hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">Block_release</span><span class="p">(</span><span class="n">greetingBlock</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.<strong>block变量的处理。在MRR下，不会自动retain这个_block变量。在ARC下，会自动retain，如果不要此默认行为，需要替换使用</strong>weak。</p>

<p>5.在block中使用self,而不产生引用循环，。在MRR下,4里面说过，在这种情况下，_block变量不会retain，但是要注意当[self dealloc]之后不能再调用block：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__block</span> <span class="n">ClassName</span> <span class="o">*</span><span class="n">that</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">block</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">CGFloat</span> <span class="n">percentComplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">that</span> <span class="n">doSome</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在ARC下，使用__weak,当对象dealloc之后，会自动置为nil。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">ClassName</span> <span class="o">*</span><span class="n">that</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">__unsafe_unretained</span> <span class="n">ClassName</span> <span class="o">*</span><span class="n">that</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span><span class="c1">//for iOS 4.x and up</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">block</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">CGFloat</span> <span class="n">percentComplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ClassName</span> <span class="o">*</span><span class="n">this</span> <span class="o">=</span> <span class="n">that</span><span class="p">;</span><span class="c1">//(1)</span>
</span><span class='line'>    <span class="p">[</span><span class="n">that</span> <span class="n">doSome</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="c1">//(2)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果有第(1)步，则会在block中产生一个本地的<strong>strong变量，而ARC中所有的变量默认都是</strong>strong的，这样会导致这个变量retained，而这个this本地变量会在第(2)处被释放掉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TZAsynchImageView]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/17/tzasynchimageview/"/>
    <updated>2013-12-17T23:09:39+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/17/tzasynchimageview</id>
    <content type="html"><![CDATA[<p>非ARC，支持文件、内存缓存</p>

<h3>使用方法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">TZAsynchImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">TZAsynchImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithUrlString:</span><span class="s">@&quot;url&quot;</span> <span class="nl">frame:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span> <span class="nl">placeholder:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;p.jpg&quot;</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">imageView</span> <span class="nl">setUrlString:</span><span class="s">@&quot;url&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">imageView</span> <span class="nl">setUrlString:</span><span class="s">@&quot;url&quot;</span> <span class="nl">placeholder:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;p.jpg&quot;</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>清除文件缓存</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">TZAsynchDownloader</span> <span class="nl">clearCacheFilesBefore:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">TZAsynchDownloaderclearAllCacheFiles</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>清除内存缓存,每次退出一个界面的时候，可以清理一次</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">TZAsynchDownloader</span> <span class="n">getInstance</span><span class="p">]</span> <span class="n">clearMemoryFiles</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>原理</h3>

<blockquote><ol>
<li>查找urlString是否在cache，如果不在到2，否则执行6</li>
<li>查找urlString是否在文件中，如果不在到3，否则把图片加入cache，执行6</li>
<li>注册kDownloadedImage的消息，下载单例开始下载</li>
<li>下载完成，存入cache，存入文件，发出kDownloadedImage消息</li>
<li>所有注册kDownloadedImage的imageview执行1</li>
<li>返回图片</li>
</ol>
</blockquote>

<p>项目地址:<a href="https://github.com/itianzhu/TZAsynchImageView">https://github.com/itianzhu/TZAsynchImageView</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样在github上创建Blog]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/17/zen-yang-zai-githubshang-chuang-jian-blog/"/>
    <updated>2013-12-17T00:02:27+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/17/zen-yang-zai-githubshang-chuang-jian-blog</id>
    <content type="html"><![CDATA[<p>必须的东西</p>

<p>1.安装git</p>

<p>2.建立github账号</p>

<p>3.在github上建立username.github.io为名的仓库</p>

<p>然后运行下面的shell命令</p>

<div>
  <pre><code class='shell'>git clone git://github.com/imathis/octopress.git octopress
cd octopress
bundle install
rake install //安装默认模板
rake setup_github_pages //按照提示填入信息</code></pre>
</div>


<p>打开source/_config.yml填入Blog信息</p>

<div>
  <pre><code class='shell'>rake generate
rake deploy //按照提示填入信息
rake new_post[&quot;title&quot;] //创建新的文章
rake generate
rake preview
rake deploy</code></pre>
</div>



]]></content>
  </entry>
  
</feed>
