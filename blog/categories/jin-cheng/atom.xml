<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 进程 | tz's Blog]]></title>
  <link href="http://itianzhu.github.io/blog/categories/jin-cheng/atom.xml" rel="self"/>
  <link href="http://itianzhu.github.io/"/>
  <updated>2013-12-22T00:07:59+08:00</updated>
  <id>http://itianzhu.github.io/</id>
  <author>
    <name><![CDATA[tz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby线程和进程]]></title>
    <link href="http://itianzhu.github.io/blog/2013/12/22/rubyxian-cheng-he-jin-cheng/"/>
    <updated>2013-12-22T00:04:56+08:00</updated>
    <id>http://itianzhu.github.io/blog/2013/12/22/rubyxian-cheng-he-jin-cheng</id>
    <content type="html"><![CDATA[<h3>线程的创建</h3>

<p><code>
thead = Thread.new("www.google.com") do |url|
  Thead.current[:count] = 1;
  http = Net::HTTP.new(url, 80)
  print "Fetching: #{url}\n"
  res = http.get('/')
  print "Got #{url}: #{res.message}\n"
  "hi"
end
thead.join
p thead[:count]
p thead.value
</code></p>

<h3>线程的方法</h3>

<p><code>
Thead#jion #主线程等待
Thead#value #等待返回Thead的最后一个代码的返回值
Thread#status
Thread#alive?
Thread#priority=
Thead#current
</code></p>

<h3>线程变量</h3>

<p><code>
Thead.current[:count] = 1;
</code></p>

<h3>线程异常</h3>

<p>如果没有调用thead.jo'in则线程里面的异常不会引起主线程的崩溃，如果调用join，可以通过设置类变量来避免
<code>
Thead.abort_on_exception = false
</code></p>

<h3>线程加锁</h3>

<p>```
mutex = Mutex.new
threads = 10.times.map do
  Thread.new do 100_000.times do
  mutex.lock</p>

<p>  mutex.unlock
end
<code>
或者
</code>
mutex = Mutex.new
threads = 10.times.map do
Thread.new do 100_000.times do
  mutex.synchronize do</p>

<p>  end
end
```</p>

<h5>如果想取得锁但是又不想暂停当前线程调用try_lock,如果想暂时解锁锁，可以调用sleep</h5>

<p>```
rate_mutex = Mutex.new
exchange_rates = ExchangeRates.new
exchange_rates.update_from_online_feed
  Thread.new do rate_mutex.lock
  loop do</p>

<pre><code>rate_mutex.sleep 3600
exchange_rates.update_from_online_feed
</code></pre>

<p>  end
end
loop do
  print &ldquo;Enter currency code and amount: &rdquo;
  line = gets
  if rate_mutex.try_lock</p>

<pre><code>puts(exchange_rates.convert(line)) ensure rate_mutex.unlock 
</code></pre>

<p>  else</p>

<pre><code>puts "Sorry, rates being updated. Try again in a minute" 
</code></pre>

<p>  end
end
```</p>

<h3>创建进程</h3>

<p>这两个方法是同步的，除了这两个，其它的都是不同步的，主进程可以先退出，而子进程不会被主进程退出
<code>
system("tar xzf test.tgz") # =&gt; true 只返回成功与否
`date` # =&gt; "Mon May 27 12:31:17 CDT 2013\n"
$? #返回最后一个进程的返回值
</code></p>

<h5>如果需要输入、输出。这些不是同步</h5>

<p>```
pig = IO.popen(&ldquo;local/util/pig&rdquo;, &ldquo;w+&rdquo;) pig.puts &ldquo;ice cream after they go to bed&rdquo; pig.close_write #发送end-of-file给pig的输入
puts pig.gets</p>

<h6>############ 我是分割线</h6>

<p>IO.popen(&ldquo;date&rdquo;) {|f| puts &ldquo;Date is #{f.gets}&rdquo; }</p>

<h6>############ 我是分割线</h6>

<p>fork do
  puts &ldquo;In child, pid = #$$&rdquo;
  exit 99
end
pid = Process.wait
puts &ldquo;Child terminated, pid = #{pid}, status = #{$?.exitstatus}&rdquo;</p>

<h1>produces:</h1>

<h1>In child, pid = 22033</h1>

<h1>Child terminated, pid = 22033, status = 99</h1>

<p>```</p>

<h3>子进程交互,只在支持fork的操作系统上有用，windows不支持</h3>

<p><code>
pipe = IO.popen("-","w+")  #进程的第一个参数必须为 "-" minus sign
if pipe
  pipe.puts "Get a job!"
  STDERR.puts "Child says '#{pipe.gets.chomp}'"
else
  这里是子进程执行的
  STDERR.puts "Dad says '#{gets.chomp}'"
  puts "OK"
end
</code></p>

<h3>独立子进程</h3>

<p>```
exec(&ldquo;sort testfile > output.txt&rdquo;) if fork.nil?</p>

<h1>exec在子进程执行，因为fork.nil在子进程中为真</h1>

<p>Process.wait</p>

<h6>####### 我是分割线</h6>

<p>trap(&ldquo;CLD&rdquo;) do
pid = Process.wait
puts &ldquo;Child pid #{pid}: terminated&rdquo;
end
fork { exec(&ldquo;sort testfile > output.txt&rdquo;) }</p>

<h1>produces:</h1>

<h1>Child pid 123456: terminated</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
